{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a15441d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Zumkeller numbers in this range =  21716\n",
      "Number of numbers that cannot be written as sum of zumkeller numbers =  1541\n",
      "The largest number that cannot be written as sum of zumkeller numbers =  32761\n",
      "Time taken =  40.51304817199707  seconds\n"
     ]
    }
   ],
   "source": [
    "import sympy as sp\n",
    "from sympy import divisors\n",
    "import numpy as np\n",
    "import time\n",
    "from joblib import Parallel, delayed\n",
    "\n",
    "time_begin = time.time()\n",
    "\n",
    "max_number_to_check = 94187\n",
    "\n",
    "def append_if_zumkeller(n):\n",
    "    mod1 = n%18\n",
    "    if mod1 in [6,12]:\n",
    "        return n\n",
    "    \n",
    "    mod2 = n%100\n",
    "    if mod2 in [20,40,60,80]:\n",
    "        return n\n",
    "    \n",
    "    mod3 = n%196\n",
    "    if mod3 in [28,56,84,112,140,168]:\n",
    "        return n\n",
    "    \n",
    "    mod4 = n%968\n",
    "    if mod4 in [88,176,264,352,440,528,616,704,792,880]:\n",
    "        return n\n",
    "    \n",
    "    mod5 = n%1352\n",
    "    if mod5 in [104,208,312,416,520,624,728,832,936,1040,1144,1248]:\n",
    "        return n\n",
    "    \n",
    "    d = divisors(n)\n",
    "    s = sum(d)\n",
    "    \n",
    "    if not s % 2 and 2*n <= s:\n",
    "        d.remove(n)\n",
    "        s2, ld = int(s/2-n), len(d)\n",
    "        z = np.zeros((ld+1, s2+1), dtype=int)\n",
    "        for i in range(1, ld+1):\n",
    "            y = min(d[i-1], s2+1)\n",
    "            z[i, range(y)] = z[i-1, range(y)]\n",
    "            z[i, range(y, s2+1)] = np.maximum(z[i-1, range(y, s2+1)], z[i-1, range(0, s2+1-y)]+y)\n",
    "            if z[i, s2] == s2:\n",
    "                return n  # Return the Zumkeller number\n",
    "\n",
    "results = Parallel(n_jobs=-1)(delayed(append_if_zumkeller)(i) for i in range(1,94186))\n",
    "\n",
    "\n",
    "zumkeller_numbers_list = [num for num in results if num is not None]\n",
    "zumkeller_numbers_list.sort()\n",
    "\n",
    "print(\"Number of Zumkeller numbers in this range = \", len(zumkeller_numbers_list))\n",
    "\n",
    "\n",
    "possible_sums = set()\n",
    "zumkeller_numbers_set = set(zumkeller_numbers_list)\n",
    "\n",
    "# Iterate through each Zumkeller number and check if its complement is in the set\n",
    "for target in range(1,max_number_to_check + 1):\n",
    "    for zum_num in zumkeller_numbers_list:\n",
    "        if zum_num > target:\n",
    "            break\n",
    "        if target - zum_num in zumkeller_numbers_set:\n",
    "            possible_sums.add(target)\n",
    "            break\n",
    "\n",
    "# Create a list to store numbers that can't be written as sum of two Zumkeller numbers\n",
    "non_sums = [num for num in range(1, max_number_to_check + 1) if num not in possible_sums]\n",
    "\n",
    "print(\"Number of numbers that cannot be written as sum of zumkeller numbers = \", len(non_sums))\n",
    "print(\"The largest number that cannot be written as sum of zumkeller numbers = \", max(non_sums))\n",
    "print(\"Time taken = \", time.time() - time_begin, \" seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9be74b5e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
